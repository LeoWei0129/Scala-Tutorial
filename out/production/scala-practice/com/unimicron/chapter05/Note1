函數注意事項和細節討論
1. 函數的型參列表可以是多個，如果函數沒有型參，可以不帶()
2. 型參列表和返回值列表的數據類型可以是值類型和引用類型
3. Scala中的函數可以根據函數體最後一行代碼自行推斷函數返回值類型，在這種情況下，return關鍵字可以省略
4. 因為Scala可以自行推斷，所以在省略return的場合，返回值類型也可以省略
5. 如果函數明確使用return關鍵字，那麼函數返回值就不能使用自行推斷了，這時要明確寫成: return_type = {}，
   當然如果甚麼都不寫，即使有return，返回值為()
6. 如果函數明確聲明無返回值(聲明Unit)，那麼函數體中即使使用return關鍵字也不會有返回值
7. 如果確定函數無返回值或不確定返回值類型(e.g. 不確定函數是否只有一個返回值類型)，那麼返回值類型可以省略(或聲明
   為Any)
8. Scala中任何的語法結構都可以嵌套其他語法結構(靈活)，即: 函數中可以再聲明/定義函數，類中可以再聲明類，方法中
   可以再聲明/定義方法
9. Scala中函數的型參，在聲明參數時，直接賦初始值(默認值)，這時調用函數時，如果沒有指定實參，則會實用默認值，
   如果使用了實參，則實參會覆蓋默認值
10. 如果函數有多個參數，每一個參數都可以給默認值，這個時候，傳遞的參數到底是覆蓋默認值還是賦值給沒有默認值的參
    數?就不確定了(默認按照聲明順序(從左到右))，這種情況下，可以採用帶名參數
11. Scala函數默認的型參是val的，所以不能在函數中進行修改
12. 遞歸函數未執行之前無法推斷出結果類型，聲明函數時必須明確指定返回值類型
13. Scala函數支持可變參數，可變參數必須寫在型參列表的最後
    *args是集合，通過for循環可以訪問到各個值
    (EX):
    def sum(args: Int*): Int = {...} // 支持0~多個參數
    def sum(n1: Int, args: Int*): Int = {...} // 支持1~多個參數
    for(item <- args){...}

1. 函數的返回值類型為Unit的函數稱之為過程(procedure)，如果明確函數沒有返回值，等號可以省略，因為若沒有返回值
   類型卻有等號，代表的是類型自動推斷，自動推斷還是會有返回值的
   所以過程可以寫成有加Unit，或沒有Unit也沒有等號


* 有=: 進行類型推斷(初始為Unit，根據函數體最後一行，Scala自行推斷是哪種返回類型)，這種情況下不能寫return
* 沒有=(連帶不會有返回值類型): 一定返回()
* def f1 = "Leo" 等價於
  def f1() = {
    "Leo"
  }
