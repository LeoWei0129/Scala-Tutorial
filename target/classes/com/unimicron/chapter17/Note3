1. 簡單工廠模式

基本介紹
1. 簡單工廠模式是屬於創建型模式，但不屬於於23種GOF設計模式之一，簡單工廠模式是由一個工廠對象決定創建出哪一
   種(產品)類的實例，簡單工廠模式就是工廠模式家族中最簡單實用的模式
2. 簡單工廠模式: 定義了一個負責創建對象的類，由這個類來封裝實例化對象的行為(代碼)
3. 在軟體開發中，當我們會用到大量的創建某種、某類、某批對象時，就會使用到工廠模式

看一個具體需求
設計一個披薩的項目: 要便於披薩種類的擴展，要便於維護，完成帕薩訂購功能
使用傳統方式寫代碼的優缺點:
1. 優點是好理解，簡單易操作
2. 缺點是違反了設計模式的ocp原則，即對擴展開放、對修改關閉(允許新增一個類(子類)，但不要隊員先寫好的類進行修改)，即
   當我們給類增加新功能的時候，盡量不修改代碼，或者盡可能少修改代碼
3. 比如我們這時要新增加一個Pizza的種類，我們就需要做不小的改動
改進的思路分析:
1. 分析: 修改代碼可以接受，但是如果我們在其他的地方也有創建Pizza的代碼，就意味著那個地方的代碼也需要修改，而創建
   pizza的代碼，往往有多處
2. 思路: 把創建pizza對象封裝到一個類中，這樣我們有新的pizza種類時，只需要修改該類說明就可，其他有創建到pizza對象
   的代碼就不需要修改了
實現
簡單工廠模式的設計方案: 定義一個負責實例化Pizza對象的類，封裝創建對象的代碼
此時有一個新的需求
根據項目的需求，客戶在點披薩時，可以點不同口味的披薩，比如北京的奶烙披薩、北京的起司披薩、倫敦的希臘披薩...
思路1
使用簡單工廠模式，創建不同的簡單工廠類，比如BJPizzaSimpleFactory、LDPizzaSimpleFactory...，從當前這個案例來
說，也是可以的，但是考慮到項目的規模，可擴展性不是特別好
思路2
使用工廠方法模式，增進可擴展性

2. 工廠方法模式(實例化下沉)

工廠方法模式設計方案: 將披薩項目的實例化功能抽象成抽象方法，在不同的口味點餐子類中具體實現
工廠方法模式: (在父類中)定義了一個用於創建對象的抽象方法，在子類中實作這個方法，由子類的這個方法決定要實例化的類，
工廠方法模式將對象的實例化推遲到子類
因為是對/基於方法去做抽象的(這個方法被定義在不同的邏輯業務類中，如OrderPizza類、SalePizza類、SendPizza類)，
沒涉及到Factory類的抽象，所以叫做工廠方法模式，這種方法會創建太多功能相似的子類，他們的作用都是創建該子類下的
不同口味Pizza類，只是針對不同的邏輯業務類而言

不同於這裡代碼將createPizza()定義在OrderPizza.scala的作法
可以寫一個抽象Factory類，定義了createPizza()抽象方法，再寫兩個子類BJFactory、LDFactory繼承抽象Factory類，並
實作createPizza()，針對個別的子類去實例化不同口味的Pizza類，其他內部功能同上

3. 抽象工廠模式

基本介紹
1. 抽象工廠模式: 定義了一個trait用於創建相關或有依賴關係的對象簇，而無須指名具體的類
2. 抽象工廠模式可以將簡單工廠模式和工廠方法模式進行整合
3. 從設計層面看，抽象工廠模式就是對簡單工廠模式的改善(或者稱進一步的抽象)
4. 將工廠抽象成兩層，AbsFactory(抽象工廠)和具體實現的工廠子類，這樣將單個的簡單工廠類變成了工廠簇，更利於代碼的維護和
   擴展