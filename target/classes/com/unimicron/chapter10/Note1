隱式轉換和隱式值

隱式轉換的實際需要 => 指定某些數據類型的相互轉化

隱式函數基本介紹
隱式轉換函數式以implicit關鍵字聲明的帶有單個參數的函數，這種函數將會自動應用，將值從一種類型轉換為另一種類型
使用隱式函數可以優雅地接決數據類型轉換
=>底層:
private final int f1$1(double d){
    return (int)d;
}
int num = f1$1(3.5);

注意事項
1. 隱式轉換函數的函數名可以是任意的，隱式轉換與函數名無關，只與函數簽名(函數參數類型與返回值類型)有關
2. 隱式函數可以有多個，但是需要保證在當前環境下，只有一個隱式函數能被識別

隱式轉換豐富/擴展類庫的功能
如果需要為一個類增加一個方法，可以通過隱式轉換來實現(動態增加功能)，比如想為MySQL類增加一個delete方法
在當前程序中，如果想要給MySQL類增加功能是很簡單的，但是在實際項目中，如果想要增加新的功能就會需要改變源代碼(MySQL類的部分)，
這是很難接受的，而且違背了軟件開發的OCP開發原則(閉合原則open close principle)，在這種情況下，可以通過隱式轉換函數給類動態添
加功能

隱式值
隱式值也叫隱式變量，將某個型參變量標較為implicit，所以編譯器會在調用方法時且省略引式參數的情況下去搜索作用域內的隱式值作為缺省
參數

隱式類
在Scala 2.10後提供了隱式類，可以使用implicit聲明類，隱式類非常強大，同樣可以擴展類的功能，比前面使用隱式轉換豐富類庫功能更加方便，在
集合中隱式類會發揮重要的作用

特點:
1. 其所帶的構造參數有且只能有一個
2. 隱式類必須被定義在類或伴生對象或包對象中，即隱式類不能是頂級的(top-level objects)
3. 隱式類不能是case class(樣例類)
4. 作用域內不能有與之相同名稱的標識符

隱式的轉換時機
1. 當調用方法時傳入的參數類型與方法定義中的目標型參類型不一致時，或者在賦值時也可以
2. 當對象調用所在類(此對象對應的類)中不存在的方法或成員時，編譯器會自動將對象進行隱式轉換

注意事項
1. 隱式轉換不能有二異性
2. 隱式轉換不能嵌套使用
implicit def f1(d: Double): Int = {
    d.toInt
    val num1: Int = 3.5 // 底層: f1$1(3.5)，而f1$1對應的就是f1，就會形成遞歸，變成死循環，所以編譯器不允許這種情況發生，報錯
}

