1. 集合的擴展 - 拉鍊(合併)(Zip)

在開發中，當我們需要將兩個集合進行對偶元組合並，可以使用拉鍊

注意事項
1. 拉鍊的本質就是兩個集合的合併操作，合併後兩個元素是一個對偶元組
2. 如果兩個集合個數不對應，會造成數據丟失，不報錯
3. 集合不限於List，也可以是其他集合，如Array
4. 如果要取出合併後的各個對偶元組的數據，可以遍歷
   for(item <- list){
       println(item._1 + item._2)
   }

2. 擴展 - 迭代器(Iterator)

所有的集合都有繼承迭代器，所以集合都可以使用迭代器來遍歷
通過iterator方法從集合獲得一個迭代器，通過while循環和for表達式對集合進行遍歷

3. 擴展 - 流(Stream)

Stream是一個集合，可以用於存放無窮多個元素，但是這無窮多個元素並不會一次性產生出來，而是需要用到多大的區間，就會動態
的生產，末尾元素遵循lazy規則(即: 要使用結果才進行計算的)

4. 擴展 - 視圖(view)*****

Stream的懶加載特性，也可以對其他集合應用view方法來得到類似的效果，具有如下特點:
a. view方法產出一個總是被"懶執行"的集合
b. view不會緩存數據，每次都要重新計算，比如遍歷view時

5. 擴展 - 線程安全的集合

所有線程安全的集合都是以Synchronized開頭的集合
SynchronizedBuffer
SynchronizedMap
SynchronizedPropertyQueue
SynchronizedQueue
SynchronizedSet
SynchronizedStack

6. 擴展 - 並行集合(優化，充分使用多核CPU)

Scala為了充分使用多核CPU，提供了並行集合(有別於前面的串行集合)，用於多核環境的並行計算
主要用到的算法有:
a. Divide and Conquer: 分治算法，Scala通過Splitters(分解器)，combiners(組合器)等抽象層來實現，主要原理是將計算
   工作分解很多任務，分發給一些處理器去完成，並將他們處理結果合併返回
b. Work Stealin: 主要用於任務調度負載均衡(load-balancing)，也就是說完成自己的所有任務之後，發現其他人還有任務沒做
   完，主動(或被安排)幫忙一起做，達到盡早完成的目的

7. 擴展 - 操作符