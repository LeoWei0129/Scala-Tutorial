使用遞歸的方式去思考、去編程

Scala是運行在Java虛擬機之上，因此具有如下特點:
1. 輕鬆實現和豐富的Java類庫互聯互通
2. 他能支持面向對象的編程方式(OO)，又支持函數式編程
3. 他寫出的程序像動態語言一樣簡潔，但事實上他卻是嚴格意義上的靜態語言

Scala提倡函數式編程(遞歸思想)
先說下編程範式:
1. 在所有的編程範式中，面向對象編程(Object-Oriented Programming)無疑是最大的贏家
2. 但其實面向對象編程並不是一種嚴格意義上的編程範式，嚴格意義上的編程範式分為: 命令式編程(Imperative Programming)、
   函數式編程(Functional Programming)、遞歸式編程(Logic Programming)，面向對象編程只是上述幾種範式的一個交叉產物，
   更多的還是繼承了命令式編程的基礎
3. 在傳統的語言設計中，只有命令式編程得到了強調，那就是程序員要告訴計算機應該怎麼做，而遞歸則通過靈巧的函數定義，告訴
   計算機做甚麼，因此，在使用命令式編程的程序中，是現在多數程序採用的編程方式，遞歸出鏡的機率很少，而在函數式編程中，
   可隨處見到遞歸的方式

遞歸使用的陷阱
1.

應用實例
1. Scala中，不建議使用while和do...while，而建議使用遞歸