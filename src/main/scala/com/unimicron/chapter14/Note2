閉包(closure)

基本介紹
閉包就是一個函數和與其相關的引用環境組合的一個整體(實體)

(EX): def minusxy(x: Int) = (y: Int) => x - y
1. 返回的是一個匿名函數，因為該函數引用到函數外的x，那麼，該函數和x整體形成一個閉包
如: val f = minusxy(20)的f函數就是閉包
2. 可以這樣理解，返回函數就是一個對象，而x就是該對象的一個字段，他們共同形成一個閉包
3. 當多次調用f時(可以理解為多次調用閉包)，發現使用的是同一個x，所以x不變
4. 在使用閉包時，主要搞清楚返回函數引用了該返回函數外的哪些變量，因為他們會組合成一個整體(實體)，形成一個閉包

好處(ref. ClosureDemo.scala)
1. 返回的匿名函數和makeSuffix(suffix: String)的suffix變量組合成一個閉包，因為返回的匿名函數引用到suffix這個變量
2. 閉包的好處: 如果使用傳統的方式，也可以輕鬆實現這個功能，但傳統方法需要每次都填入後綴名，比如.jog，而閉包因為可以保
   留上次引用的某個值，所以我們傳入一次就可以反覆使用