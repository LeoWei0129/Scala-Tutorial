偏函數(partial function) - 本質: 先過濾再映射

基本介紹
在對符合某個條件，而不是所有情況進行邏輯操作時，使用偏函數是一個不錯的選擇
將包在大括號內的一個case語句封裝為函數，我們稱之為偏函數，他只對會作用於指定類型的參數或指定範圍值的參數實施計算，超出
範圍的值會忽略(未必會忽略，這取決於你打算怎麼處理)
偏函數在Scala中是一個特質PartialFunction

小結
1. 偏函數使用構建特質的實現類(使用方式是PartialFunction的匿名子類)
2. 構建偏函數時，參數形式[Any, Int]是泛型，第一個表示參數類型，第二個表示返回類型
3. 當使用偏函數時，會遍歷集合的所有元素，編譯器執行流程時先執行isDefinedAt()，如果為true，就會執行apply()，構建一個新
   的Int對象返回
4. 執行isDefinedAt()為false，即不構建新的Int對象
5. map()不支持偏函數，因為map底層的機制就是所有循環遍歷，無法過濾處理原來集合的元素
6. collect()支持偏函數

偏函數簡化形式
聲明偏函數，需要重寫特質中的方法，有的時候會略顯麻煩，而Scala其實提供了簡單的方法(見PartialFuncBasic.scala)

作為參數的函數
函數作為一個變量傳入到了另一個函數中，那麼該做為參數的函數，此函數的類型是: function1，即(參數類型) => 返回類型

匿名函數
沒有名字的函數就是匿名函數，可以通過函數表達式來設置匿名函數
(EX): val triple = (x: Double) => x + 3
1. (x: Double) => x + 3 就是匿名函數
2. (x: Double)是參數列表，=>是規定語法，後面接的是函數體，x + 3就是函數體，如果有多行，可以{}換行寫
3. triple是指向該匿名函數地址的變量

高階函數
能夠接收函數作為參數的函數和作為返回函數的函數，叫做高階函數(higher-order function)，可使應用程序更加健壯
高階函數可以返回數據類型

參數(類型)推斷
參數推斷省去類型訊息(在某些情況下，需要有應用場景)，參數類型是可以推斷出來的，如List(1, 2, 3)，list.map()，map()中
傳入的函數的參數類型是可以推斷的，同時也可以進行相應的簡寫

參數類型推斷寫法說明
1. 參數類型是可以推斷時，可以省略參數類型
2. 當傳入的函數，只有單個參數時，可以省去括號
3. 如果變量只在=>右邊只出現一次，可以用_來代替

匿名函數與高階函數混合使用小結
1. map是一個高階函數，因此也可以直接傳入一個匿名函數，完成map
2. 當遍歷list時，參數類型是可以推斷出來的，可以省略數據類型Int -> println(list.map((x) => x + 1))
3. 當傳入的函數只有單個參數時，可省略括號 -> println(list.map(x => x + 1))
4. 如果變量只在=>右邊出現一次，可以用_來代替，此時=>和其右邊的變量可省略 -> println(list.map(_ + 1))
